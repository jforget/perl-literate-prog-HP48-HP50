fr: Programmation littéraire pour HP-48 et HP-50
en: Literate programming for HP-48 and HP-50
---
- section: 0
  'fr,en': Introduction
- fr: |
    Ceci est un texte auto-descriptif
    présentant le format que j'ai choisi pour faire
    de la programmation littéraire pour 
    les calculatrices HP fonctionnant en RPL.
- en: |
    This is a self-describing text showing the
    format I chose to use literate programming for
    RPL-using HP calculators.
- fr: |
    Si vous lisez une alternance de français et d'anglais
    avec quelques symboles curieux, vous lisez le bon fichier.
    Si vous lisez un texte bien présenté et entièrement en
    français sur votre navigateur Internet ou si vous lisez du HTML, 
    vous lisez un fichier annexe. Sa lecture peut vous éclairer sur
    la programmation littéraire, mais il n'est plus auto-descriptif.

    Il est préférable de lire en parallèle le texte d'origine (français
    + anglais avec les symboles spéciaux) et le texte HTML généré
    pour mieux se rendre compte du fonctionnement du système.
- en: |
    If you are reading alternating paragraphs in French and in English,
    with a few special formulas spread between, you are reading the proper
    self-describing file. If you are reading a properly rendered file in
    your web browser, or some HTML source, you are reading a secondary
    file, which may give you some information, but which cannot be
    considered as self-describing.

    It is better to read in parallel the source file (French + English
    with some special symbols) and the generated HTML file, so the
    operation of the system is easier to understand.
- fr: |
    La programmation littéraire a été popularisée, peut-être même
    inventée, par Donald Knuth. À partir d'un fichier source, 
    <var>toto</var><tt>.web</tt> contenant du code, des commentaires
    et quelques directives d'édition, il génère un fichier 
    <var>toto</var><tt>.tex</tt> pour la documentation et un fichier
    source Pascal <var>toto</var><tt>.p</tt> pour le programme à proprement
    parler. Une variante appelée CWEB part d'un fichier
    <var>toto</var><tt>.cweb</tt> pour obtenir un fichier de documentation
    <var>toto</var><tt>.tex</tt>  et un fichier programme en C
    <var>toto</var><tt>.c</tt> 

    Et comme le fichier à l'usage des humains est distinct
    du fichier à l'usage du compilateur, rien n'oblige à ce qu'ils
    présentent le code dans le même ordre. Donc, par exemple, le fichier 
    <var>toto</var><tt>.tex</tt> commence par donner une idée générale
    de l'algorithme, puis il définit la structure de données principale,
    puis le détail de l'algorithme, puis les initialisations et enfin
    le traitement des erreurs. Comme le fichier source <var>toto</var><tt>.web</tt>
    a la même structure, Knuth a appelé <tt>weave</tt>
    («&nbsp;tisser&nbsp;») le programme permettant
    de passer de <var>toto</var><tt>.web</tt> à <var>toto</var><tt>.tex</tt>.
    À l'inverse, <var>toto</var><tt>.p</tt> et <var>toto</var><tt>.web</tt>
    ont des structures nettement différentes, donc le programme permettant de
    passer de l'un à l'autre s'appelle <tt>tangle</tt> («&nbsp;emmêler&nbsp;»).
- en: |
    Literay programming was popularised, maybe even created,
    by Donald Knuth. Starting with a source file 
    <var>toto</var><tt>.web</tt> which contains code, comments and
    a few editing commands, he generates a 
    <var>toto</var><tt>.tex</tt> documentation file and a
    <var>toto</var><tt>.p</tt> Pascal source file for the program.
    A variant named CWEB starts with a
    <var>toto</var><tt>.cweb</tt> file to produce a 
    <var>toto</var><tt>.tex</tt>  documentation file and a
    <var>toto</var><tt>.c</tt> C programme file.

    Since the human-readable file is different from the compiler-readable
    file, they can present the code in a different order. So, for
    example, the <var>foo</var><tt>.tex</tt> file can first give a
    general orverview of the algorithm, then define the main data
    structure, show the details of the algorithm and end with
    intialisation and error processing. The source file 
    <var>toto</var><tt>.web</tt> has the same structure as 
    <var>toto</var><tt>.tex</tt>, so the programme generating
    the T<sub>E</sub>X file is called <tt>weave</tt>. On the other
    hand, the structure of <var>toto</var><tt>.p</tt> is very different,
    so the programme generating the Pascal file is called <tt>tangle</tt>.
- fr: |
    Ma version diffère sur plusieurs points.
    <ul>
    <li>Le fichier documentation généré n'est pas du T<sub>E</sub>X,
    mais du HTML.</li>
    <li>WEB et CWEB génèrent un seul fichier de documentation, mon
    système permet de générer plusieurs fichiers dans des langues
    différentes à partir d'un fichier <tt>.hpweb</tt> multilingue.</li>
    <li>WEB génère du Pascal, CWEB génère du C, mon système génère du
    RPL pour les calculatrices HP.</li>
    <li>C'est le même programme qui tisse les fichiers de documentation
    et qui emmêle les fichiers de code.</li>
    </ul>
- en: |
    My version differs on several points.
    <ul>
    <li>The human-readable file is not T<sub>E</sub>X  but HTML</li>
    <li>WEB and CWEB generate only one documentation file, my
    programme uses a multilingual <tt>.hpweb</tt> file to generate
    several documentation files.</li>
    <li>WEB generates Pascal, CWEB generates C or C++ and my programme
    generates User-RPL for HP calculators.</li>
    <li>The same programme weaves the documentation files and tangles
    the code files.</li>
    </ul>
- section: 0
  fr: Principe
  en: Principle
- fr: |
    Le texte source est écrit dans un fichier
    <a href='http://www.yaml.org/'>YAML</a> contenant deux
    variables. La première, très brève, se contente d'énumérer
    les langues utilisées en donnant à cette occasion le titre
    du fichier HTML généré. Elle liste également les noms des fichiers 
    qui contiendront le code.
- en: |
    The source text comes from a <a href='http://www.yaml.org/'>YAML</a>
    file. This YAML file contains two variables. The first one,
    much shorter than the second one, lists all the languages
    used and for each of them gives the title of the HTML file.
    It lists also the filenames where code will be stored.
- fr: |
    La seconde variable est une liste de fragments. Chaque fragment
    peut être&nbsp;:

    <ul>
      <li>un fragment section</li>
      <li>du texte</li>
      <li>du code</li>
      <li>la spécification d'un lien dans le fragment de code précédent.</li>
    </ul>

    Attention, il faut bien distinguer les «&nbsp;fragments sections&nbsp;»
    des «&nbsp;sections&nbsp;». Un fragment section se termine lorsque
    commence un autre fragment, que ce soit du texte, du code, voire un
    autre fragment section, tandis qu'une section regroupe tous les fragments
    à partir d'un fragment section (inclus) jusqu'au fragment section suivant
    (exclus, car faisant partie de la section suivante).
- en: |
    The second variable is a list of chunks. Each chunk can be:

    <ul>
      <li>a section fragment</li>
      <li>some text</li>
      <li>some code</li>
      <li>the specification of a link in the preceding code chunk.</li>
    </ul>

    Note that a "section fragment" is not the same as a section.
    A section fragment ends when the next fragment, text or code, begins.
    A section is the collection of all fragments from a first section
    fragment (included) to the next section fragment (excluded, because
    it belongs to the next section).
- fr: |
    Le tissage consiste à construire un fichier HTML pour chaque
    code langue. Le programme passe en revue tous les fragments
    et tient compte des fragments sections, des fragments codes
    indépendamment de la langue et des fragments textes associés 
    à la langue en cours de traitement.

    Pour chaque fragment, le programme effectue un léger traitement
    de formattage. Ainsi, les fragments sections donnent lieu
    à une balise <tt>&lt;h</tt><var>n</var><tt>&gt;</tt> et à
    une balise <tt>&lt;a name='</tt><var>xxx</var><tt>'&gt;</tt>.
    Les fragments de code sont encadrés par des balises <tt>&lt;pre&gt;</tt>.

    En outre, dans les fragments de texte et de code, on repère les références
    (balisées par «&nbsp;@&nbsp;» ou par «&nbsp;£&nbsp;») pour établir
    un lien <tt>&lt;a href='#</tt><var>xxx</var><tt>'&gt;</tt> vers
    d'autres sections.
- en: |
    Weaving consists in building an HTML file for each language code.
    The program scans all fragments, keeping the sections fragments
    and code fragment irrespective of the language code and the
    text fragments tagged with the current language code.

    Each fragment is slightly reformatted. A section fragment
    generates a <tt>&lt;h</tt><var>n</var><tt>&gt;</tt> tag and a
    <tt>&lt;a name='</tt><var>xxx</var><tt>'&gt;</tt> tag.
    The code fragments are sandwiched between <tt>&lt;pre&gt;</tt> tags.

    In addition, in text fragments and code fragments, the program
    looks for references tagged by "@" or "£" and generates
    links <tt>&lt;a href='#</tt><var>xxx</var><tt>'&gt;</tt> to other
    sections.
- fr: |
    L'emmêlement se passe ainsi pour un fichier de code donné&nbsp;:
    le programme commence par répertorier toutes les sections 
    appelées dans ce fichier. Il passe également en revue toutes
    les sections pour en extraire les références consistant à inclure
    une section dans une autre. Après s'être assuré qu'il n'y a pas
    de dépendance circulaire et après avoir déterminé dans quel ordre
    il faut générer les sections, le programme effectue ces insertions
    et écrit le fichier de code final.
- en: |
    For a given code file, tangling consists in the following actions.
    The program starts by listing all the sections assigned to the
    file. It also scans all sections to extract the insertion-type
    references. It checks there is no cycle in these references 
    and determines in which order the sections will be generated
    by inserting other sections. Then, the program writes the
    code sections into the final code file.
- section: 0
  fr: Détails
  en: Details
- section: 0
  fr: Jeu de caractères
  en: Characters set
  level: 3
- fr: |
    Le fichier est écrit en UTF-8 pour être lu par YAML. Mais la machine
    cible utilise un codage spécifique assez proche de l'ISO-8859.
    Pour les caractères utilisés par les HP-48 et HP-50 qui ne figurent
    pas dans le jeu de caractère ISO-8859-1, il faudra utiliser une
    séquence de caractères introduite par un <i lang='en'>backslash</i>.
    Par exemple, les lignes&nbsp;:
- en: |
    The file is written in UTF-8 to be readable by YAML. But the
    target machine uses a specific encoding similar to ISO-8859.
    For the characters belonging to the HP-48/HP-50 character set,
    but not the ISO-8859-1 character set, you will use backslash sequences.
    So, the following lines:
- code: |
    \\<) \\x- \\.V \\v/ \\.S \\GS \\|> \\pi \\.d \\<= \\>= \\=/ \\Ga \\-> \\<- \\|v \\|^
    \\Gg \\Gd \\Ge \\Gn \\Gh \\Gl \\Gr \\Gs \\Gt \\Gw
    \\GD \\PI \\GW \\[] \\oo
- fr: |
    donneront lieu à&nbsp;:
- en: |
    will result in:
- code: |
    \<) \x- \.V \v/\.S \GS \|> \pi \.d \<= \>= \=/ \Ga \-> \<- \|v\|^
    \Gg \Gd \Ge \Gn \Gh \Gl \Gr \Gs \Gt \Gw
    \GD \PI \GW \[] \oo
- fr: |
    Notons que certains caractères qui figuent dans le jeu de caractères
    ISO-8859-1 ont eux aussi une séquence introduite par <i lang='en'>backslash</i>
    alors qu'il n'en ont pas réellement besoin.
- en: |
    Note that some characters which do belong to the ISO-8859-1 character set
    have a backslash sequence, although they would not need it.
- code: |
    \\<< \\^o \\Gm \\>> \\.x \\O/ \\Gb \\:-
    «   °   µ   »   ×   Ø   ß   ÷
- fr: |
    Et si vous avez besoin de faire apparaître une telle séquence
    sans la remplacer par le caractère spécial, il suffit d'insérer
    un <i lang='en'>backslash</i> avant cette séquence, pour désactiver
    l'interprétation du <i lang='en'>backslash</i>. C'est vrai également
    pour désactiver l'interprétation du «&nbsp;@&nbsp;» et du «&nbsp;£&nbsp;»
    dans les cas où ils pourraient être compris à tort comme des liens vers d'autres
    sections.
- en: |
    And if you need to display such a sequence without replacing it
    by the special character, you just have to insert a backslash before
    the sequence, to deactivate the interpretation of the backslash.
    The same procedure applies to the cases when "@" or "£" would be
    wrongly understood as links to other sections.
- section: 0
  fr: Syntaxe YAML
  en: YAML Syntax
  level: 3
- fr: |
    Pour les besoins de la syntaxe YAML, pour chaque fragment,
    la première ligne du contenu doit commencer par 4&nbsp;espaces
    et les lignes suivantes par 4&nbsp;espaces ou plus.

    Normalement, les liens devraient dépendre du fragment de code
    précédent et donc figurer dans une structure interne, marquée
    par une indentation plus importante. Mais pour la simplification
    de la saisie, ils figurent à la même indentation que le fragment
    de code associé.
- en: |
    For the YAML syntax, the first line of each chunk
    must begin with 4 spaces and the next lines must begin
    with 4 or more spaces.

    Theoretically, the link fragments depend on the previous code
    fragment and they should therefore be in an inner structure, 
    which means in YAML a longer indentation.  But for the
    ease of text entry, the identation is the same, 4 spaces.
- fr: |
    Lorsqu'il y a besoin d'un code langue, il est possible de spécifier
    plusieurs codes langues séparés par des virgules. Cela permet de mettre
    en commun le texte associé, s'il ne contient aucun élément traduisible 
    ou si la traduction est identique à l'original. Par exemple.
- en: |
    When a language code is required, it is allowed to enter several
    codes joined with a comma. This allows to use the same text for all
    given languages, if this text contains no translatable element,
    or if the translation is identical to the original sentence.For example
- code: |
    'fr,en': Introduction
- fr: |
     est remplacé par&nbsp;:
- en: |
     is replaced by:
- code: |
    fr: Introduction
    en: Introduction

- section: 0
  fr: Tissage
  en: Weaving
- fr: |
    Le tissage est présenté ci-dessous pour un code langue donné,
    alors qu'il concerne tous les codes langues en parallèle.

    Le nom du fichier en sortie est le nom du fichier en entrée,
    moins l'extension <tt>.hpweb</tt>, plus un point, le code
    langue et l'extension <tt>.html</tt>. Par exemple, pour le
    français, le fichier <tt>description.htweb</tt> donnera
    le fichier en sortie <tt>description.fr.html</tt>
- en: |
    Weaving is explained hereafter for one language code, although
    the real program processes all language codes in parallel.

    The name of the output file is the name of the input file,
    minus the <tt>.hpweb</tt> extension, plus a dot, the language
    code and the extension <tt>.html</tt>. For example, for
    the English language, the
    input file <tt>description.htweb</tt> will produce the output
    file <tt>description.en.html</tt>.
- fr: |
    Le titre spécifié dans la première variable du fichier YAML
    permet d'avoir le contenu de l'élément <tt>&lt;title&gt;</tt>
    et de l'élément <tt>&lt;h1&gt;</tt> du fichier HTML.
- en: |
    The title specified in the first variable of the YAML
    file gives the contents of the <tt>&lt;title&gt;</tt>
    and the <tt>&lt;h1&gt;</tt> elements in the HTML file.
- fr: |
    Pour le tissage, le programme extrait dans l'ordre tous les fragments sections,
    tous les textes dépendant du code langue utilisé et tous les
    fragments de code, avec les spécifications de liens associées.
- en: |
    When weaving, the program extracts all section fragments, all texts
    which belongs to the current language code, all code fragments
    and all corresponding links specifications.
- fr: |
    Chaque fragment section génère une balise <tt>&lt;h2&gt;</tt>
    et une balise <tt>&lt;a name='...'&gt;</tt>, le nom étant
    donné par l'attribut <tt>section</tt> de la section. Le contenu
    est donné par le texte associé à la langue.
- en: |
    Each section fragment generates a <tt>&lt;h2&gt;</tt> tag and a
    <tt>&lt;a name='...'&gt;</tt> tag, the name of which is
    given by the <tt>section</tt> attribute. The contents is the
    text associated to the language.
- fr: |
    Pour les textes, le balisage par défaut est les balises <tt>&lt;p&gt;</tt>.
    Chaque paragraphe (fragment de texte ou portion de fragment de texte
    délimitée par des lignes vides) sera encadré par 
    <tt>&lt;p&gt;</tt> et <tt>&lt;/p&gt;</tt>, sauf si une balise existe
    déjà au début et à la fin. Et si par hasard, vous 
    ne voulez pas de balise, il vous suffit d'ajouter
    un commentaire HTML <tt>&lt;!-- blabla --&gt;</tt>.
- en: |
    Default tagging for texts is <tt>&lt;p&gt;</tt>, so
    each paragraph (text fragment or text fragment portion
    delimited by empty lines) will be surrounded by
    <tt>&lt;p&gt;</tt> and <tt>&lt;/p&gt;</tt>, except if another tag exists
    both at the beginning and at the end of the paragraph.
    And if you do not want any tag, just add 
    an HTML comment <tt>&lt;!-- blahblah --&gt;</tt>.
- fr: |
    Les fragments de type code sont tous repris
    dans le fichier HTML généré. De plus, pour les
    fragments de type <tt>GROB</tt>, le programme génère un
    fichier <tt>.png</tt> représentant le bitmap associé.
    Le fichier n'est pas appelé automatiquement dans le HTML
    généré, il faut l'appeler «&nbsp;manuellement&nbsp;» avec
    une balise <tt>&lt;img&gt;</tt> dans un fragment texte.
- en: |
    All code fragments are used when generating
    the HTML file.  
    In addition, for <tt>GROB</tt> fragments, the program generates
    a <tt>.png</tt> file containing the bitmap.
    This file is not automatically linked to in the generated
    HTML file, you must include a <tt>&lt;img&gt;</tt> tag in
    a text fragment to show it.
- fr: |
    Dans tous les cas, fragment section, texte et code, le tissage recherche
    les séquences introduites par un <i lang='en'>backslash</i> pour
    les remplacer par le caractère associé (en fait, la séquence
    <tt>&amp;#</tt><var>nnn</var><tt>;</tt>). Par exemple,
    la séquence <tt>\\pi</tt> sera remplacée par <tt>&amp;#960;</tt>, c'est-à-dire \pi.
    En même temps, les noms de section encadrés par des <tt>@</tt> ou des
    <tt>£</tt> sont transformés en liens hypertextes vers la section du
    même nom (cela dit, il n'y a pas de contrôle, le lien peut pointer
    vers le néant s'il n'existe aucune section de ce nom).
    Et dans le cas des fragments codes, les <tt>&lt;&gt;&amp;</tt> sont
    remplacés par la séquence HTML correspondante. Ce n'est pas fait
    pour les sections et les textes, car ceux-ci contiennent déjà du marquage
    HTML et on considère que les  <tt>&lt;&gt;&amp;</tt> y sont déjà sous
    la forme <tt>&amp;lt;&amp;gt;&amp;amp;</tt>.
- en: |
    In all cases, section fragments, text and code, weaving looks for substrings
    starting with a backslash to substitute them with the associated
    character (or actually, the corresponding
    <tt>&amp;#</tt><var>nnn</var><tt>;</tt> sequence). For example,
    <tt>\\pi</tt> will be replaced by <tt>&amp;#960;</tt>, that is, \pi.
    At the same time, the section names sandwiched between two <tt>@</tt>'s
    or two <tt>£</tt>'s are changed into an hyperlink to the section
    with the corresponding name (yet, there is no check; if the name 
    defines no section, the link will be dangling).
    And for code fragments, the <tt>&lt;&gt;&amp;</tt> are escaped.
    This is not done for sections and texts, because they already include
    HTML tags, and we consider that all <tt>&lt;&gt;&amp;</tt> are already coded
    as <tt>&amp;lt;&amp;gt;&amp;amp;</tt>.

- section: 0
  fr: Emmêlement
  en: Tangling
- fr: |
    L'emmêlement permet de générer un ou plusieurs fichiers
    téléchargeables sur les machines HP-48 ou HP-50.
    Il peut y avoir plusieurs raisons pour générer
    plusieurs fichiers&nbsp;:

    <ul>
      <li>un fichier contient les fonctions de base et les autres fichiers les fonctions étendues,</li>
      <li>les fichiers contiennent des chaînes de caractères dans des langues différentes
      pour les invites et les messages,</li>
      <li>les fichiers concernent des machines cibles différentes, par exemple une HP-48
      avec un affichage 64x131 et une HP-50 avec un affichage 80x131,</li>
      <li>un fichier contient les routines utilitaires sous formes de variables globales
      dans le répertoire de la HP, pour faciliter la mise au point, tandis qu'un autre
      fichier stocke toutes ces routines utilitaires dans des variables locales
      des programmes fournis.</li>
    </ul>
- en: |
    Tangling results in the generating of one or several
    files loadable on HP-48's and HP-50's. There can
    be several reasons to generate several files&nbsp;:

    <ul>
    <li>one file contains the basic functions and the others contain the extensions,</li>
    <li>each file contains prompt strings and message strings in a different language,</li>
    <li>the files apply to different target machines, for example one file for HP-48's
    with a 64x131 screen and another file for HP-50's with a 80x131 screen,</li>
    <li>one file stores all routines into global variables, to facilitage
    development, while the other stores these routines as local variables
    inside the main programs.</li>
    </ul>
- section: 0
  fr: Préparation
  en: Preparation
  level: 3

- fr: |
    La première étape consiste à recenser tous les fragments de code
    qui s'appliquent au fichier de code en cours de constitution et
    à identifier les liens (appels et insertions) qui s'y trouvent.
    À cette occasion, le programme bâtit un graphe des appels et un
    graphe des insertions.
- en: |
    The first step consists in collating all code fragments which are
    involved in building the current code file, and extracting all the
    links (calls and inserts) which exist in these fragments.
    During this step, the program builds a graph for the insert links 
    and another graph for the call links.

- fr: |
    La deuxième étape a deux buts&nbsp;:

    <ol>
    <li>
    établir un tri topologique des fragments en fonction des insertions,
    pour savoir quels fragments il faut traiter en premier, lesquels
    il faut traiter en second et ainsi de suite.
    </li>
    <li>
    détecter les cycles dans le graphe des insertions.
    </li>
    </ol>

- en: |
    The second step acheives two purposes:

    <li>
    topologically sort the fragments according to the insertion
    links, to determine in which order they have to be generated.
    </li>
    <li>
    détect any cycles in the insertions graph.
    </li>
    </ol>
- section: 0
  fr: Licence
  en: License
- fr: |
    Ce code est diffusé sous les mêmes termes que Perl, la licence GPL
    et la licence artistique.
- en: |
    This code is published under the same terms as Perl: GPL and Artistic License.
