#!/usr/bin/perl
# -*- encoding: utf-8; indent-tabs-mode: nil -*-
#
# Génération de la documentation HTML et du fichier source du programme
# Generating the HTML documentation and the source file containing the program
#
# Copyright (C) 2011--2013, 2015, 2019, Jean Forget
#
# Author: Jean Forget
# Maintainer: Jean Forget
# Keywords: literate programming
#
# This program is free software; you can redistribute it and modify
# it under the terms of Perl:
# -- either the GNU General Public License as published by
#    the Free Software Foundation; version 1, or (at your option)
#    any later version,
# -- or the Artistic Licence.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING. If not, see <https://www.gnu.org/licenses/>.

use utf8;
use strict;
use warnings;
use YAML;
use Getopt::Long;
use Data::Dumper;
use GraphViz;

my $trace = 0;
my $flg_number = 0;
GetOptions("trace:i" => \$trace,
           "number"  => \$flg_number,
  )
  or die "Problème avec les options";

my $racine = $ARGV[0];

my %transco1 = ( # méta-caractères
       '@', '@', '\\', '\\', '|', '|',
       # flèches
       '<-', '2190', '|^', '2191', '->', '2192', '|v', '2193', 
       # comparaisons
       '=/', '2260', '<=', '2264', '>=', '2265',
       # grec minuscule
       'pi', '3c0', 'Ga', '3b1', 'Gg', '3b3', 'Gd', '3b4', 'Ge', '3b5', 'Gn', '3b7',
       'Gh', '3b8', 'Gl', '3bb', 'Gr', '3c1', 'Gs', '3c3', 'Gt', '3c4', 'Gw', '3c9',
       # autres symboles (à revoir : v- |> )
       '<)', '2221', 'x-', 'x-', '.V', '2207', 'v/', '221a', '.S', '222b', 'GS', '2211',
       '|>', '25b6', '.d', '2202', 'GD', '2206', 'PI', '220f', 'GW', '3a9', '[]', '220e',
       'oo', '221e', 
    );
$transco1{'x-'} = 'x&#772;';
my %transco2 = ( '<', '&lt;', '>', '&gt;', '&', '&amp;' );
# Obligé de trier par longueur décroissante pour que '|^' et '|v' matchent avant '|'
my $re1 = join '|', map { quotemeta $_ } sort { length($b) <=> length($a) } keys %transco1;
for (values %transco1) {
  $_ = sprintf "&#%d;", hex($_)
    if /^[0-9a-f]+$/i;
}

my %textes;
my %codes;
my %dec_point;

my ($h, $l) = YAML::LoadFile("$racine.hpweb");
if ($trace & 1) {
  print Data::Dumper::Dumper($h, $l);
}

# séparer les codes langues dans $h
for my $cle (keys %$h) {
  if ($cle =~ /,/) {
    for my $cle1 (split ',', $cle) {
      $h->{$cle1} = $h->{$cle};
    }
    delete $h->{$cle};
  }
}

for (keys %$h) {
  if ($h->{$_} eq 'code' || $h->{$_} eq 'dir' || $h->{$_} eq 'code41') {
    $codes{$_} = 1;
    $dec_point{$_} = ",";
  }
  elsif ($h->{$_} eq 'code.' || $h->{$_} eq 'dir.') {
    $codes{$_} = 1;
    $dec_point{$_} = ".";
  }
  elsif ($h->{$_} eq 'apl') {
    $codes{$_} = 'apl';
    $dec_point{$_} = ".";
  }
  else {
    my $nom = "$racine.$_.html";
    open my $f, '>:encoding(utf8)', $nom
      or die "Ouverture $nom $!";
    $textes{$_}{name} = $nom;
    $textes{$_}{fh} = $f;
    print $f <<"EOF";
<html>
<head>
<meta http-equiv='content-type' content='Text/html; charset=utf-8' />
<title>$h->{$_}</title>
<style>
<!--
.insert    { background-color: skyblue}
.call      { background-color: yellow}
.condcode  { background-color: lightgrey }
.condition { font-size-adjust: .5 }
-->
</style>
</head>
<body>
<a href='#$h->{$_}'>$h->{$_}</a>
EOF
  }
}

# séparer les codes langues dans @$l
for my $fragment (@$l) {
  for my $cle (keys %$fragment) {
    if ($cle =~ /,/) {
      for my $cle1 (split ',', $cle) {
        $fragment->{$cle1} = $fragment->{$cle};
      }
      delete $fragment->{$cle};
    }
  }
}

if ($trace & 2) {
  print Data::Dumper::Dumper($h, $l);
}

# Table des matières
for my $fragment (@$l) {
  if (defined $fragment->{section}) {
    my $section = $fragment->{section};
    for (keys %textes) {
      my $f = $textes{$_}{fh};
      my $titre = transcrit($fragment->{$_} || '', 0);
      if ($section && $titre) {
        print $f "<br /><a href='#$section'><tt>$section</tt> - $titre</a>\n";
      }
      elsif ($titre) {
        my $lien = $titre;
        $lien =~ s/[<>&']/_/g;
        print $f "<br /><a href='#$lien'>$titre</a>\n";
      }
      elsif ($section) {
        print $f "<br /><a href='#$section'><tt>$section</tt></a>\n";
      }
    }
  }
}

# Fin de la table des matières et titre principal
for (keys %textes) {
  my $f = $textes{$_}{fh};
  my $titre = $h->{$_};
  print $f "<hr /><h1><a name='$titre'>$titre</a></h1>\n";
}

# Texte principal
for my $fragment (@$l) {

  if (defined $fragment->{section}) {
    my $section = $fragment->{section};
    my $niveau  = $fragment->{level} || 2;
    if ($trace & 4) {
      print "$section\n";
    }
    for (keys %textes) {
      my $f = $textes{$_}{fh};
      my $titre = transcrit($fragment->{$_} || '', 0);
      if ($section && $titre) {
        print $f "<h$niveau><a name='$section'><tt>$section</tt> - $titre</a></h$niveau>\n";
      }
      elsif ($titre) {
        my $lien = $titre;
        $lien =~ s/[<>&']/_/g;
        print $f "<h$niveau><a name='$lien'>$titre</a></h$niveau>\n";
      }
      elsif ($section) {
        print $f "<h$niveau><a name='$section'><tt>$section</tt></a></h$niveau>\n";
      }
    }
    next;
  }

  elsif ($fragment->{code}) {
    my $code = $fragment->{code};
    if (substr($code, 0, 2) eq ".\n") {
      $code = substr($code, 2);
      $fragment->{code} = $code;
    }

    my @condition;
    $fragment->{commun} = 1;
    for (keys %codes) {
      if ($fragment->{$_}) {
        $fragment->{commun} = 0;
        push @condition, $_;
      }
    }

    $code = transcrit($code, 1);
    my $condition = '';
    my $classe    = '';
    unless ($fragment->{commun}) {
      $classe = " class='condcode'";
      $condition = join ', ', sort @condition;
      $condition = "<span class='condition'>$condition</span>\n";
    }

    for my $lg (keys %textes) {
      my $f = $textes{$lg}{fh};
      print $f "<pre$classe>\n$condition$code</pre>\n";
    }

    next;
  }

  else {
    # Fragment de texte, indexé par le code langue
    for my $lg (keys %$fragment) {

      my $texte = $fragment->{$lg};
      if (substr($texte, 0, 2) eq ".\n") {
        $texte = substr($texte, 2);
        $fragment->{$lg} = $texte;
      }

      for my $paragraphe (split /\n\n+/, transcrit($fragment->{$lg}, 0)) {
        if ($trace & 8) {
          print "--$paragraphe--\n";
        }
        if ($paragraphe !~ /\A\<.*\>\z/s && $paragraphe !~ /\A\<.*\>\Z/s) {
          $paragraphe = "<p>\n$paragraphe</p>\n";
        }
        my $f = $textes{$lg}{fh};
        print $f $paragraphe, "\n";
      }
    }
  }
}

# Fin de la documentation
for (keys %textes) {
  my $f = $textes{$_}{fh};
  print $f "</body>\n</html>\n";
  close $f
    or die "fermeture $textes{$_}{name} $!";
}

# Table des sections et accesseurs aux propriétés des sections
my %sections;
sub rang_sect : lvalue {
  $sections{$_[0]}{rang};
}
sub nv_hier : lvalue {
  $sections{$_[0]}{hier};
}
sub code_sect : lvalue {
  $sections{$_[0]}{code};
}
sub globale : lvalue {
  $sections{$_[0]}{global};
}

# Génération des fichiers de code
for my $fic (keys %codes) {

  my $section = '';
  my $rang;
  %sections = ();
  my %appel;
  my %insertion;  

  for my $fragment (@$l) {

    if (defined $fragment->{section}) {
      $section = $fragment->{section};
      $rang    = $fragment->{$fic} || 0;
      next
        unless ($section);
      rang_sect($section) = $rang;
      nv_hier  ($section) = 0;
    }

    elsif ($fragment->{code} && $section) {
      if ($fragment->{commun} || $fragment->{$fic}) {
        push @{$sections{$section}{fragments}}, $fragment->{code};
        my @morceau = decoup($fragment->{code});
        for (my $i = 2;  $i < $#morceau; $i +=5) {
          if ($morceau[$i]) {
            # lien call
            $appel{$section}{$morceau[$i]} ++;
          }
          elsif ($morceau[$i+1]) {
            # lien insertion
            $insertion{$section}{$morceau[$i+1]} ++;
          }
        }
      }
    }
  }

  # Construction du graphe des appels et des insertions
  my $g = GraphViz->new();
  $g->add_node($fic, shape => 'octagon');

  for (keys %sections) {
    if (rang_sect($_)) {
      $g->add_node($_, shape => 'box');
      $g->add_edge($fic, $_);
      globale($_) = 1;
    }
    else {
      $g->add_node($_);
    }
  }

  for my $haut (keys %insertion) {
    for my $bas (keys %{$insertion{$haut}}) {
      $g->add_edge($haut, $bas);
    }
  }

  for my $haut (keys %appel) {
    for my $bas (keys %{$appel{$haut}}) {
      $g->add_edge($haut, $bas, color => 'red');
    }
  }

  open my $f, '>', "$fic.png"
    or die "Ouverture $fic.png $!";
  print $f $g->as_png;
  close $f
    or die "fermeture $fic.png $!";

  if ($trace & 16) {
    print $fic, ' sections ',  YAML::Dump(\%sections);
    print $fic, ' appel ',     YAML::Dump(\%appel);
    print $fic, ' insertion ', YAML::Dump(\%insertion);
  }

  # Tri topologique des sections
  my $change   = 1;
  my $max_hier = 0;
  while ($change && ($max_hier <= keys %sections)) {
    $change = 0;
    for my $d (keys %insertion) {
      for my $a (keys %{$insertion{$d}}) {
        if (nv_hier($d) <= nv_hier($a)) {
          nv_hier($d) = nv_hier($a) + 1;
          $change = 1;
          if (nv_hier($d) > $max_hier) {
            $max_hier = nv_hier($d);
          }
        }
      }
    }
  }
  if ($max_hier > keys %sections) {
    print STDERR "Il existe un cycle dans $fic\n";
    next;
  }
  if ($trace & 32) {
    print $fic, " après le tri topologique\n";
    print $fic, ' sections ',  YAML::Dump(\%sections);
  }
  # Génération des sections
  for my $section (sort { nv_hier($a) <=> nv_hier($b) } keys %sections) {
    my @code = ();
    for my $fragment (@{$sections{$section}{fragments}}) {
      my @morceau = decoup($fragment);
      for (my $i = 0; $i < $#morceau; $i += 5) {
        my $seq_bcksl = $morceau[$i + 1];
        my $etiq_call = $morceau[$i + 2];
        my $etiq_insr = $morceau[$i + 3];
        if ($seq_bcksl) {
          $morceau[$i + 1] = '\\' . $seq_bcksl;
        }
        if ($etiq_call && ! globale($etiq_call)) {
          $morceau[$i + 2] = "$etiq_call EVAL";
        }
        if ($etiq_insr) {
          $morceau[$i + 3] = code_sect($etiq_insr);
        }
      }
      push @code, grep { length($_) } @morceau;
    }
    if (@code != 0 && $code[-1] !~ /\n$/) {
      if ($trace & 64) {
        print "$fic, $section : ajout d'un passage à la ligne\n";
      }
      push @code, "\n";
    }
    code_sect($section) = join '', @code;
  }
  if ($trace & 64) {
    print "$fic après génération des sections\n";
    print $fic, ' sections ',  YAML::Dump(\%sections);
  }

  if ($codes{$fic} eq 'apl') {
    open $f, '>:encoding(UTF-8)', $fic
      or die "Ouverture $fic $!";
  }
  else {
    open $f, '>', $fic
      or die "Ouverture $fic $!";
  }
  if ($h->{$fic} eq 'dir') {
  print $f <<'EOF';
%%HP: T(3)A(R)F(,);
DIR
EOF
  }
  elsif ($h->{$fic} eq 'dir.') {
  print $f <<'EOF';
%%HP: T(3)A(R)F(.);
DIR
EOF
  }

  my $cpt = 0;
  # Impression des sections
  for my $section (sort { rang_sect($a) <=> rang_sect($b) } grep { globale($_) } keys %sections) {
    if ($h->{$fic} eq 'dir' or $h->{$fic} eq 'dir.') {
      print $f "$section ";
    }
    if ($flg_number == 0) {
      print $f code_sect($section);
    }
    else {
      print "numéroter $section\n";
      my @lignes = grep /\S/, split "\n", code_sect($section);
      for my $ligne (@lignes) {
        printf $f "%4d %s\n", ++$cpt, $ligne;
        #print "$ligne\n";
      }
      #print code_sect($section);
    }

  }

  if ($h->{$fic} eq 'dir' or $h->{$fic} eq 'dir.') {
    print $f "END\n";
  }
  close $f
    or die "fermeture $fic $!";
}

exit(0);

sub transcrit {
  # $texte : le texte à transcrire,
  # $transc_html : faut-il transcrire les <>& en HTML ou bien sont-ils déjà transcrits ?
  my ($texte, $transc_html) = @_;

  my @morceau = decoup($texte);

  for (my $i = 1; $i < $#morceau; $i +=5) {
    my $etiq_call = $morceau[$i + 1];
    my $etiq_ins  = $morceau[$i + 2];
    if ($morceau[$i]) {
      # Séquence préfixée par un backslash
      $morceau[$i] = $transco1{$morceau[$i]};
    }
    elsif ($etiq_call) {
      $morceau[$i + 1] = "<a href='#$etiq_call' class='call'>$etiq_call</a>";
    }
    elsif ($etiq_ins) {
      $morceau[$i + 2] = "<a href='#$etiq_ins' class='insert'>$etiq_ins</a>";
    }
    elsif ($transc_html) {
      $morceau[$i + 3] = $transco2{$morceau[$i + 3]};
    }
  }
  return join '', @morceau;
}
 

sub decoup {
  my ($texte) = @_;
  my @capture = split /\\($re1) # capture des séquences préfixées par backslash
                    | @([\w∆]+)@   # capture des appels à une étiquette
                    | \|([\w∆]+)\| # capture des insertions
                    | ([<>&])   # capture des caractères spéciaux HTML
                    /x, $texte;

  # with an unknown version of Perl, the result of the list-context split is
  # a list of read-only values. Yet we need read-and-write values
  my @morceau = @capture;

  for (my $i = 1; $i < $#morceau; $i +=5) {
    $morceau[$i    ] ||= ''; 
    $morceau[$i + 1] ||= ''; 
    $morceau[$i + 2] ||= ''; 
    $morceau[$i + 3] ||= ''; 
  }
  return @morceau;
}
